/* eslint-disable */
export default async () => {
    const t = {
        ["../../../packages/cctp-sdk/evm/dist/address"]: await import("../../../packages/cctp-sdk/evm/dist/address"),
        ["./gaslessTransfer/dto/quote.dto"]: await import("./gaslessTransfer/dto/quote.dto"),
        ["./gaslessTransfer/dto/jwtPayload.dto"]: await import("./gaslessTransfer/dto/jwtPayload.dto"),
        ["./gaslessTransfer/dto/quoteResponse.dto"]: await import("./gaslessTransfer/dto/quoteResponse.dto"),
        ["./gaslessTransfer/dto/relayResponse.dto"]: await import("./gaslessTransfer/dto/relayResponse.dto")
    };
    return { "@nestjs/swagger": { "models": [[import("./gaslessTransfer/dto/quoteRequest.dto"), { "QuoteRequestDto": { sourceDomain: { required: true, type: () => Object, description: "The source blockchain for the transfer", example: "Ethereum" }, targetDomain: { required: true, description: "The target blockchain for the transfer", example: "Arbitrum" }, amount: { required: true, type: () => Object, description: "Transfer amount in whole USDC units\nSupports up to 6 decimal places (e.g., \"1.5\" represents 1.5 USDC)", example: "1.5" }, sender: { required: true, type: () => t["../../../packages/cctp-sdk/evm/dist/address"].EvmAddress, description: "Sender's Ethereum address", example: "\"0xf39Fd6e51aad88F6F4ce6aB8827279cffFb92266" }, recipient: { required: true, type: () => t["../../../packages/cctp-sdk/evm/dist/address"].EvmAddress, description: "Recipient's Ethereum address on the target chain", example: "\"0xf39Fd6e51aad88F6F4ce6aB8827279cffFb92266" }, corridor: { required: true, type: () => Object }, gasDropoff: { required: true, type: () => Object, description: "Amount of native gas token desired on target chain for gas dropoff\nSpecified in native token units (e.g., ETH, MATIC, AVAX)\nSupports up to 18 decimal places, use \"0\" if no gas dropoff is desired", example: "0.01" }, permit2PermitRequired: { required: false, type: () => Object, description: "Whether a permit2 permit is required for this transaction\n(checked and constructed on client side)", example: true } } }], [import("./gaslessTransfer/dto/jwtPayload.dto"), { "JwtPayloadDto": { permit2TypedData: { required: true, type: () => Object, description: "Permit2 typed data for user signature" }, quoteRequest: { required: true, description: "Original quote request parameters" }, gaslessFee: { required: true, type: () => Object } } }], [import("./gaslessTransfer/dto/quote.dto"), { "QuoteDto": { jwt: { required: true, type: () => String, description: "Server-signed JWT containing the permit2 permit data for the user to sign as well as the quote data", example: "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9" } } }], [import("./gaslessTransfer/dto/quoteResponse.dto"), { "QuoteResponseDto": { data: { required: true, type: () => t["./gaslessTransfer/dto/quote.dto"].QuoteDto } } }], [import("./gaslessTransfer/dto/relayRequest.dto"), { "RelayRequestDto": { jwt: { required: true, type: () => t["./gaslessTransfer/dto/jwtPayload.dto"].JwtPayloadDto, description: "Server-signed JWT containing the permit2 permit data for the user to sign as well as the quote data", example: "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9" }, permit2Signature: { required: true, type: () => String, description: "User's signature of the permit2 message", example: "0x1234567890abcdef..." }, permitSignature: { required: true, type: () => String, description: "User's signature of a permit message for permit2 contract", example: "0x1234567890abcdef..." }, takeFeesFromInput: { required: true, type: () => Object, description: "Whether the fees will be taken from the input or added\non top of it", example: "true" } } }], [import("./gaslessTransfer/dto/relayResponse.dto"), { "RelayResponseDto": { data: { required: true, type: () => Object } } }]], "controllers": [[import("./metrics/metrics.controller"), { "MetricsController": { "getMetrics": { type: String } } }], [import("./gaslessTransfer/gaslessTransfer.controller"), { "GaslessTransferController": { "getStatus": { summary: "Get the current status of the gasless transfer service", type: String }, "quoteGaslessTransfer": { summary: "Generate a quote for a gasless transfer", type: t["./gaslessTransfer/dto/quoteResponse.dto"].QuoteResponseDto }, "initiateGaslessTransfer": { type: t["./gaslessTransfer/dto/relayResponse.dto"].RelayResponseDto } } }]] } };
};